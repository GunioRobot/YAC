NAME
YAC (YACCMS (Yet Another Catalyst CMS))
    Colofon:

    YAC resembles to Yeast artificial chromosome. Yeah! Yeast is our mascote
    colofon. See <http://en.wikipedia.org/wiki/Yeast>

VERSION
    Version 0.02

AUTHOR
    Monsenhor, "<ricardo.filipo at gmail.com>"

BUGS
    Please report any bugs or feature requests to "bug-yac at rt.cpan.org",
    or through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=YAC>. I will be
    notified, and then you'll automatically be notified of progress on your
    bug as I make changes.

SYNOPSIS
    A realy killer CMS. So simple! So usefull!

        use YACCMS;

        my $web = new YACCMS;
        $web->run();
        # go to web!

METHODS
  new
    Return a new instance off app controler. You now can run or stop the
    YAC.

  run
    Run the http daemon at param $port. Default to 80.

        my $port = 80 ;
        $web->run ($port) ;

  stop
        $web->stop();

    Stops the daemon.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc YAC

    You can also look for information at:

    *   RT: CPAN's request tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=YAC>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/YAC>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/YAC>

    *   Search CPAN

        <http://search.cpan.org/dist/YAC/>

YAC
  Catalyst app implementation
    YAC - Catalyst based application

SYNOPSIS
        script/yac_server.pl

DESCRIPTION
  Control Structure
    YAC can instance one of this 4 machines when run the YAC:

        . Play
        . Edit
        . Admin
        . Hack

    Each machine can be used at specific role and rigths.

    To complement and perform that machines are the Ws and Plugin controls.

    *   Play machine

        The default run is always the Play machine or Root control. Here the
        user can view media content and access basic navigational menus.

    *   Edit machine

        A logged user with editorial rigths can access the Edit machine and
        change their work.

        Edit machine presents the media content to edit. The default editor
        is pure text. Other media editor like html, widgets, code, image,
        animation, xml, svg, json and so on can be added by plugin hooks.

        The menu is same as Play machine plus personal menus and editor
        menus. The adicional interface will be the personal data editor and
        menus editor. This new editors will be integrated in the same
        interface.

    *   Admin machine

        If the user is logged with admin rigths he can access the Admin
        machine.

        Admin machine presents interfaces for edit and administer users,
        their data and work. Brings CMS's administration tasks like startup
        and shutdown the server or enable/disable some plugins.

        The menu is same as Edit machine plus users and admin menus.

    *   Hack machine

        With hacker rigths the user can access the Hack machine.

        Hack machine presents interfaces to plugins, Catalyst hooks and some
        core helpers. Permit CMS's design and building tasks like create
        widgets, features or develop a new plugin.

        The menu is same as Edit machine plus users and admin menus.

  Model Structure
    *   Stack

        The content handler. The only must in YAC.

        One can create cool stacks!!

        The core implemented stacks are: Content, Control and Widget.

        Control
            A menu manager

        Content
            Handles html content.

        Widget
            Handles js code content.

    *   Auth

        The authentication class handle users, rules and rights.

    *   User

        The user handler.

    *   Layout

        The Layout objects are viewer Catalyst templates at database
        storage.

    *   Plugin

        Plugins are Catalyst Plugins handlers.

  Core Plugins
    *   Media Player

    *   Image slide and carroussel

    *   Dialogs and some jqueryUI things

    *   fkceditor

    *   jsLinb visual editor

SEE ALSO
    YAC::Controller::Root, YAC::Controller::Edit, YAC::Controller::Admin,
    YAC::Controller::Hack, YAC::Controller::Plugin, YAC::Controller::WS,
    Catalyst

ACKNOWLEDGEMENTS
  Benefits to the Perl Community
    A CMS (Content Management System) can be a web tool used in some
    internet business to help and administer media publication. As a market
    lider let's consider Drupal, a php based CMS, reference product used by
    everywere, a key tool in Obama's USA president campaign. The Drupal's
    grow in users (designers and coders) and contributed addons bring up to
    community a lot of php programmer's work and all market demmand for
    their code.

    The media produced by CMS needs to integrate with other system like CRMs
    and ERPs or other enterprise legacy. The CMS's oportunity to programmers
    became from integration tools like a plugin system and addon facilities.
    It's the Drupal's case. That minimalistic simplicity is the strongest
    value. Programmers can hook systems in the CMS and final users can plug
    in at the website instantly.

    The secret: The designer (or anybody) can do functional web without the
    coder. A CMS needs a simple and clear user interface. But the core
    integration to other systems where the coder works need to be simple
    too. Final result: Productivity.

    In the Java, Python, Ruby or Asp world we will find similar tools like
    Typo, OpenCms, Django and Plone. Some simple, others powefull.

    At perl tools we consider MovableType. Our work will not compete
    directly with MovableType as it integrates in Catalyst's control level
    as our implementation and plugin basis. The YAC's paradigma differ in
    our simplicity and minimalistic goal. Will be ok to one begin in YAC and
    integrates MovableType anytime.

    The Catalyst Project need a extensible, basic CMS Design Pattern with
    the eyes in the final user and the hooks that a programmer can play. A
    CMS more simple than Drupal and with the power of CPAN and Catalyst.

    We will consider cpan tools like Reaction, Mojo and Dancer.

   Biblio
    <http://en.wikipedia.org/wiki/Content_management_system>
    <http://en.wikipedia.org/wiki/List_of_content_management_systems>
    <http://www.movabletype.org>
    <http://search.cpan.org/~okko/Catalyst-Controller-MovableType-0.003/>
    <http://en.wikipedia.org/wiki/OpenCms>
    <http://en.wikipedia.org/wiki/Drupal>
    <http://en.wikipedia.org/wiki/Plone_(software)>
    <http://en.wikipedia.org/wiki/Typo_(software)>
    <http://search.cpan.org/dist/Reaction/>
    <http://search.cpan.org/dist/Mojolicious/>
    <http://search.cpan.org/dist/Dancer/>

  Deliverables
    * A so basic CMS Design Pattern on Catalyst with some helpers, tools and
    simple layout.

    * Ajax user interface to some Catalyst core functions.

    * CPAN module as the first implementation.

  Project Details
    YAC will be a basic CMS Design Pattern with a simple user interface. No
    need to learn perl to play the YAC but a monger will play so well.

    A CMS needs, at least, to create, edit and publish content and to link
    that content as web address (urls) to navigation or command menus and
    links. A good addon is a theme manager. The access to the CMS and this
    features need to be defined at Access Control List. The stronguest
    feature in the UI will be a simple plugin system integrated at cpan
    level.

    The idea, as the first implementation, will be an extensible and basic
    ajax structure around jquery from Catalyst. Consider
    Catalyst::View::Component::jQuery.

    As simple as an CMS can be, YAC will implement a simple user interface
    around Catalyst helpers, open hooks and plugins. This open design will
    encourage YAC's contributions grow.

    The most important pattern to be done will be an open user interface
    paradigma. The idea about web interfaces can't neglect Ajax and the HTML
    5 protocol.

   Features
    * Media Player

    * Image slide and carroussel

    * Dialogs and some jqueryUI things

    * Access Control List Auth

    * HTML WYSIWYG content editor

    * Acces to Catalyst and Plugins hooks at WYSIWYG content editor level

    * Image, media and file upload at WYSIWYG content editor level

    * Virtual file manager at WYSIWYG content editor level

    * Plugin System, Catalyst compatible

    * Hooks to some Catalyst helpers: create View, create Model, create
      Control

LICENSE AND COPYRIGHT
    Copyright 2010 Monsenhor.

    This program is free software; you can redistribute it and/or modify it
    under the terms of either: the GNU General Public License as published
    by the Free Software Foundation; or the Artistic License.

    See http://dev.perl.org/licenses/ for more information.

