YAC (YACCMS  (Yet Another Catalyst CMS)))
    Name:
     Ricardo Filipo

    Email:
     ricardo.filipo@gmail.com

    Amount Requested:
     US$ 3.000

  Synopsis
    A realy killer CMS. So simple! So usefull!

        use YAC;

        my $web = new YAC;
        $web->run();
        # go to web!

  Benefits to the Perl Community
    A CMS (Content Management System) can be a web tool used in some
    internet business to help and administer media publication. As a market
    lider let's consider Drupal, a php based CMS, reference product used by
    everywere, a key tool in Obama's USA president campaign. The Drupal's
    grow in users (designers and coders) and contributed addons bring up to
    community a lot of php programmer's work and all market demmand for
    their code.

    The media produced by CMS needs to integrate with other system like CRMs
    and ERPs or other enterprise legacy. The CMS's oportunity to programmers
    became from integration tools like a plugin system and addon facilities.
    It's the Drupal's case. That minimalistic simplicity is the strongest
    value. Programmers can hook systems in the CMS and final users can plug
    in at the website instantly.

    The secret: The designer (or anybody) can do functional web without the
    coder. A CMS needs a simple and clear user interface. But the core
    integration to other systems where the coder works need to be simple
    too. Final result: Productivity.

    In the Java, Python, Ruby or Asp world we will find similar tools like
    Typo, OpenCms, Django and Plone. Some simple, others powefull.

    At perl tools we consider MovableType. Our work will not compete
    directly with MovableType as it integrates in Catalyst's control level
    as our implementation and plugin basis. The YAC's paradigma differ in
    our simplicity and minimalistic goal. Will be ok to one begin in YAC and
    integrates MovableType anytime.

    The Catalyst Project need a extensible, basic CMS Design Pattern with
    the eyes in the final user and the hooks that a programmer can play. A
    CMS more simple than Drupal and with the power of CPAN and Catalyst.

    We will consider cpan tools like Reaction, Mojo and Dancer.

   Biblio
    <http://en.wikipedia.org/wiki/Content_management_system>
    <http://en.wikipedia.org/wiki/List_of_content_management_systems>
    <http://www.movabletype.org>
    <http://search.cpan.org/~okko/Catalyst-Controller-MovableType-0.003/>
    <http://en.wikipedia.org/wiki/OpenCms>
    <http://en.wikipedia.org/wiki/Drupal>
    <http://en.wikipedia.org/wiki/Plone_(software)>
    <http://en.wikipedia.org/wiki/Typo_(software)>
    <http://search.cpan.org/dist/Reaction/>
    <http://search.cpan.org/dist/Mojolicious/>
    <http://search.cpan.org/dist/Dancer/>

  Deliverables
    * A so basic CMS Design Pattern on Catalyst with some helpers, tools and
    simple layout.

    * Ajax user interface to some Catalyst core functions.

    * CPAN module as the first implementation.

  Project Details
    YAC will be a basic CMS Design Pattern with a simple user interface. No
    need to learn perl to play the YAC but a monger will play so well.

    A CMS needs, at least, to create, edit and publish content and to link
    that content as web address (urls) to navigation or command menus and
    links. A good addon is a theme manager. The access to the CMS and this
    features need to be defined at Access Control List. The stronguest
    feature in the UI will be a simple plugin system integrated at cpan
    level.

    The idea, as the first implementation, will be an extensible and basic
    ajax structure around jquery from Catalyst. Consider
    Catalyst::View::Component::jQuery.

    As simple as an CMS can be, YAC will implement a simple user interface
    around Catalyst helpers, open hooks and plugins. This open design will
    encourage YAC's contributions grow.

    The most important pattern to be done will be an open user interface
    paradigma. The idea about web interfaces can't neglect Ajax and the HTML
    5 protocol.

   Features
    * Media Player

    * Image slide and carroussel

    * Dialogs and some jqueryUI things

    * Access Control List Auth

    * HTML WYSIWYG content editor

    * Acces to Catalyst and Plugins hooks at WYSIWYG content editor level

    * Image, media and file upload at WYSIWYG content editor level

    * Virtual file manager at WYSIWYG content editor level

    * Plugin System, Catalyst compatible

    * Hooks to some Catalyst helpers: create View, create Model, create
      Control

    The project will begin at august 01 and end with the YAC's first module
    uploaded to cpan.

  Inch-stones
    1. Concepts:
            Define main concepts like public target and user perfil.

        1.1. Define Frameworks:
                . Perl modules dependencies
                . Ajax basic framework

        1.2. Implement basic concepts:
                . Implement the first tests
                . Refine requirements
                . Design first UI tests

        1.3. Feedback:
                . Fish some feedback from monks and end users
                . Define some goals for next iteration

    2. Alpha Implementation:
        Implements all needs and issues from feedbacks. It will be the first
        simple but functional prototype.

        2.1. Define Requirements:
                . Perl work
                . Ajax structure

        2.2. Implementation:
                . Do tests
                . Do perl and ajax code
                . Design UI

        2.3. Feedback:
                . Fish some feedback from monks and end users
                . Define the next iteration in this phase

    3. Final Feedback:
        After the early alpha tests, maybe at 2010 november, we will take a
        Beta software without erros but the beta users need to feedback us
        about your needs.

        3.1. New Requirements and Issues:
                . Perl work
                . Ajax work

        3.2. Implementation and Debug:
                . Do tests
                . Do perl and ajax code
                . Design and improve UI

        3.3. Feedback:
                . Fish some feedback from monks and end users
                . Define the final iteration in this phase

    4. Feedback for next:
        Do some analises over feedback to define the project future.

        4.1. Debugs and Issues:
                . Perl work
                . Ajax work
                . Do tests
                . Debug perl and ajax code
                . Redesign and improve UI

        4.3. Feedback:
                . Fish some feedback from monks and end users
                . Define next grant or projects future

  Project Schedule
    6 months. Begin at august 1.

  Completeness Criteria
    The first goal is to define the CMS Design Pattern concept.

    A basic module will be released to CPAN with an example implementation.

  Bio
    Ricardo Filipo <mailto:ricardo.filipo@mitologica.com.br>

    See Lattes:

    <http://lattes.cnpq.br/0218483015859875>

    Experience about user interfaces, marketing, arts and perl.

